import axios from "axios";
import { message } from "antd";
import { Environment } from "../types/environment.types";
import { Workspace } from "../types/workspace.types";
import { UserGroup } from "../types/userGroup.types";
import {App} from "../types/app.types";
import { DataSourceWithMeta } from '../types/datasource.types';


/**
 * Fetch all environments
 * @returns Promise with environments data
 */
export async function getEnvironments(): Promise<Environment[]> {
  try {
    // The response contains the data array directly in response.data
    const response = await axios.get(
      "/api/plugins/enterprise/environments/list"
    );

    // Return the data array directly from response.data
    return response.data || [];
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch environments";
    message.error(errorMessage);
    throw error;
  }
}

/**
 * Fetch a single environment by ID
 * @param id Environment ID
 * @returns Promise with environment data
 */
export async function getEnvironmentById(id: string): Promise<Environment> {
  try {
    const response = await axios.get(
      `/api/plugins/enterprise/environments?environmentId=${id}`
    );

    if (!response.data) {
      throw new Error("Failed to fetch environment");
    }

    return response.data;
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch environment";
    message.error(errorMessage);
    throw error;
  }
}

/* ================================================================================

=============================== ENVIRONMENT WORKSPACES ============================
*/

/**
 * Fetch workspaces for a specific environment
 * @param environmentId - ID of the environment
 * @param apiKey - API key for the environment
 * @returns Promise with an array of workspaces
 */
export async function getEnvironmentWorkspaces(
  environmentId: string,
  apiKey: string, 
  apiServiceUrl: string
): Promise<Workspace[]> {
  try {
    // Check if required parameters are provided
    if (!environmentId) {
      throw new Error("Environment ID is required");
    }

    if (!apiKey) {
      throw new Error("API key is required to fetch workspaces");
    }
    if (!apiServiceUrl) {
      throw new Error('API service URL is required to fetch workspaces');
    }

    // Set up headers with the API key
    const headers = {
      Authorization: `Bearer ${apiKey}`
    };

    // Make the API request to get user data which includes workspaces
    const response = await axios.get(`${apiServiceUrl}/api/users/me`, { headers });

    // Check if response is valid
    if (!response.data || !response.data.success) {
      throw new Error(response.data?.message || "Failed to fetch workspaces");
    }

    // Extract workspaces from the response
    const userData = response.data.data;

    if (!userData.orgAndRoles || !Array.isArray(userData.orgAndRoles)) {
      return [];
    }

    // Transform the data to match our Workspace interface
    const workspaces: Workspace[] = userData.orgAndRoles.map((item:any) => ({
      id: item.org.id,
      name: item.org.name,
      role: item.role,
      creationDate: item.org.createTime,
      status: item.org.state,
      gid: item.org.gid,
      createdBy: item.org.createdBy,
      isAutoGeneratedOrganization: item.org.isAutoGeneratedOrganization,
      logoUrl: item.org.logoUrl || "",
    }));

    return workspaces;
  } catch (error) {
    // Handle and transform error
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch workspaces";
    message.error(errorMessage);
    throw error;
  }
}



/* ================================================================================

=============================== ENVIRONMENT USER GROUPS ============================ */

export async function getEnvironmentUserGroups(
  environmentId: string, 
  apiKey: string,
  apiServiceUrl: string
): Promise<UserGroup[]> {
  try {
    // Check if required parameters are provided
    if (!environmentId) {
      throw new Error('Environment ID is required');
    }
    
    if (!apiKey) {
      throw new Error('API key is required to fetch user groups');
    }
    
    if (!apiServiceUrl) {
      throw new Error('API service URL is required to fetch user groups');
    }
    
    // Set up headers with the Bearer token format
    const headers = {
      Authorization: `Bearer ${apiKey}`
    };
    
    // Make the API request to get user groups
    const response = await axios.get(`${apiServiceUrl}/api/groups/list`, { headers });
    console.log(response);
    
    // Check if response is valid
    if (!response.data) {
      throw new Error('Failed to fetch user groups');
    }
    
    // The response data is already an array of user groups
    const userGroups: UserGroup[] = response.data.data || [];
    
    return userGroups;
  } catch (error) {
    // Handle and transform error
    const errorMessage = error instanceof Error ? error.message : 'Failed to fetch user groups';
    message.error(errorMessage);
    throw error;
  }
}




/* ================================================================================

=============================== WorkSpace Details ============================ */


/**
 * Get a specific workspace by ID from the list of workspaces
 * @param workspaces - Array of workspaces
 * @param workspaceId - ID of the workspace to find
 * @returns The found workspace or null if not found
 */
export function getWorkspaceById(workspaces: Workspace[], workspaceId: string): Workspace | null {
  if (!workspaces || !workspaceId) {
    return null;
  }
  
  return workspaces.find(workspace => workspace.id === workspaceId) || null;
}

/**
 * Fetch a specific workspace from an environment
 * @param environmentId - ID of the environment
 * @param workspaceId - ID of the workspace to fetch
 * @param apiKey - API key for the environment
 * @param apiServiceUrl - API service URL for the environment
 * @returns Promise with the workspace or null if not found
 */
export async function fetchWorkspaceById(
  environmentId: string,
  workspaceId: string,
  apiKey: string,
  apiServiceUrl: string
): Promise<Workspace | null> {
  try {
    // First fetch all workspaces for the environment
    const workspaces = await getEnvironmentWorkspaces(environmentId, apiKey, apiServiceUrl);
    
    // Then find the specific workspace by ID
    return getWorkspaceById(workspaces, workspaceId);
  } catch (error) {
    throw error;
  }
}

/* ================================================================================

=============================== WorkSpace Apps ============================ */



export async function getWorkspaceApps(
  workspaceId: string, 
  apiKey: string,
  apiServiceUrl: string
): Promise<App[]> {
  try {
    // Check if required parameters are provided
    if (!workspaceId) {
      throw new Error('Workspace ID is required');
    }
    
    if (!apiKey) {
      throw new Error('API key is required to fetch apps');
    }
    
    if (!apiServiceUrl) {
      throw new Error('API service URL is required to fetch apps');
    }
    
    // Set up headers with the Bearer token format
    const headers = {
      Authorization: `Bearer ${apiKey}`
    };
    
    // Make the API request to get apps
    // Include the orgId as a query parameter if needed
    const response = await axios.get(`${apiServiceUrl}/api/applications/list`, { 
      headers,
      params: {
        orgId: workspaceId
      }
    });
    
    // Check if response is valid
    if (!response.data || !response.data.data) {
      return [];
    }
    
    const filteredApps = response.data.data.filter((app: App) => app.orgId === workspaceId);
    
    return filteredApps;
  
  } catch (error) {
    // Handle and transform error
    const errorMessage = error instanceof Error ? error.message : 'Failed to fetch apps';
    message.error(errorMessage);
    throw error;
  }
}


/* ================================================================================

=============================== WorkSpace Data Source ============================  */

/**
 * Fetch data sources for a specific workspace
 * @param workspaceId - ID of the workspace (orgId)
 * @param apiKey - API key for the environment
 * @param apiServiceUrl - API service URL for the environment
 * @returns Promise with an array of data sources
 */
export async function getWorkspaceDataSources(
  workspaceId: string, 
  apiKey: string,
  apiServiceUrl: string
): Promise<DataSourceWithMeta[]> {
  try {
    // Check if required parameters are provided
    if (!workspaceId) {
      throw new Error('Workspace ID is required');
    }
    
    if (!apiKey) {
      throw new Error('API key is required to fetch data sources');
    }
    
    if (!apiServiceUrl) {
      throw new Error('API service URL is required to fetch data sources');
    }
    
    // Set up headers with the Bearer token format
    const headers = {
      Authorization: `Bearer ${apiKey}`
    };
    
    // Make the API request to get data sources
    const response = await axios.get<{data:DataSourceWithMeta[]}>(`${apiServiceUrl}/api/datasources/listByOrg`, { 
      headers,
      params: {
        orgId: workspaceId
      }
    });
    console.log("data source response",response);
  
    // Check if response is valid
    if (!response.data) {
      return [];
    }
    
    return response.data.data ;
  } catch (error) {
    // Handle and transform error
    const errorMessage = error instanceof Error ? error.message : 'Failed to fetch data sources';
    message.error(errorMessage);
    throw error;
  }
}