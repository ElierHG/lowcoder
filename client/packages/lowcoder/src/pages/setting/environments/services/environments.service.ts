import axios from "axios";
import { message } from "antd";
import { Environment } from "../types/environment.types";
import { Workspace } from "../types/workspace.types";

/**
 * Fetch all environments
 * @returns Promise with environments data
 */
export async function getEnvironments(): Promise<Environment[]> {
  try {
    // The response contains the data array directly in response.data
    const response = await axios.get(
      "/api/plugins/enterprise/environments/list"
    );

    // Return the data array directly from response.data
    return response.data || [];
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch environments";
    message.error(errorMessage);
    throw error;
  }
}

/**
 * Fetch a single environment by ID
 * @param id Environment ID
 * @returns Promise with environment data
 */
export async function getEnvironmentById(id: string): Promise<Environment> {
  try {
    const response = await axios.get(
      `/api/plugins/enterprise/environments?environmentId=${id}`
    );

    if (!response.data) {
      throw new Error("Failed to fetch environment");
    }

    return response.data;
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch environment";
    message.error(errorMessage);
    throw error;
  }
}

/* ================================================================================

=============================== ENVIRONMENT WORKSPACES ============================
*/

/**
 * Fetch workspaces for a specific environment
 * @param environmentId - ID of the environment
 * @param apiKey - API key for the environment
 * @returns Promise with an array of workspaces
 */
export async function getEnvironmentWorkspaces(
  environmentId: string,
  apiKey: string, 
  apiServiceUrl: string
): Promise<Workspace[]> {
  try {
    // Check if required parameters are provided
    if (!environmentId) {
      throw new Error("Environment ID is required");
    }

    if (!apiKey) {
      throw new Error("API key is required to fetch workspaces");
    }
    if (!apiServiceUrl) {
      throw new Error('API service URL is required to fetch workspaces');
    }

    // Set up headers with the API key
    const headers = {
      "X-API-Key": apiKey,
    };

    // Make the API request to get user data which includes workspaces
    const response = await axios.get(`${apiServiceUrl}/api/users/me`, { headers });

    // Check if response is valid
    if (!response.data || !response.data.success) {
      throw new Error(response.data?.message || "Failed to fetch workspaces");
    }

    // Extract workspaces from the response
    const userData = response.data.data;

    if (!userData.orgAndRoles || !Array.isArray(userData.orgAndRoles)) {
      return [];
    }

    // Transform the data to match our Workspace interface
    const workspaces: Workspace[] = userData.orgAndRoles.map((item:any) => ({
      id: item.org.id,
      name: item.org.name,
      role: item.role,
      creationDate: item.org.createTime,
      status: item.org.state,
      gid: item.org.gid,
      createdBy: item.org.createdBy,
      isAutoGeneratedOrganization: item.org.isAutoGeneratedOrganization,
      logoUrl: item.org.logoUrl || "",
    }));

    return workspaces;
  } catch (error) {
    // Handle and transform error
    const errorMessage =
      error instanceof Error ? error.message : "Failed to fetch workspaces";
    message.error(errorMessage);
    throw error;
  }
}
